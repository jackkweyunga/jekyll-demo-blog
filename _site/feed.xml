<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-02T01:25:06+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Demo Blog</title><subtitle>This is a demo jekyll blogwebsite</subtitle><entry><title type="html">Understanding Async/Await in JavaScript</title><link href="http://localhost:4000/js/nodejs/ts/2024/09/02/js-async-await.html" rel="alternate" type="text/html" title="Understanding Async/Await in JavaScript" /><published>2024-09-02T00:03:33+03:00</published><updated>2024-09-02T00:03:33+03:00</updated><id>http://localhost:4000/js/nodejs/ts/2024/09/02/js-async-await</id><content type="html" xml:base="http://localhost:4000/js/nodejs/ts/2024/09/02/js-async-await.html"><![CDATA[<h2 id="understanding-asyncawait-in-javascript">Understanding Async/Await in JavaScript</h2>

<p>Async/Await is a modern syntax in JavaScript for handling asynchronous operations, making your code more readable and easier to manage.</p>

<h3 id="key-concepts">Key Concepts:</h3>

<ol>
  <li>
    <p><strong>Async Functions</strong>: Functions declared with <code class="language-plaintext highlighter-rouge">async</code> return a promise. They can pause execution using <code class="language-plaintext highlighter-rouge">await</code>.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://api.example.com/data</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="js" /><category term="nodejs" /><category term="ts" /><summary type="html"><![CDATA[Understanding Async/Await in JavaScript]]></summary></entry><entry><title type="html">Mastering Flexbox in CSS</title><link href="http://localhost:4000/css/html/2024/09/02/mastering-flexbox-in-css.html" rel="alternate" type="text/html" title="Mastering Flexbox in CSS" /><published>2024-09-02T00:03:33+03:00</published><updated>2024-09-02T00:03:33+03:00</updated><id>http://localhost:4000/css/html/2024/09/02/mastering-flexbox-in-css</id><content type="html" xml:base="http://localhost:4000/css/html/2024/09/02/mastering-flexbox-in-css.html"><![CDATA[<h2 id="mastering-flexbox-in-css">Mastering Flexbox in CSS</h2>

<p>Flexbox is a powerful CSS layout module that makes it easier to design flexible and responsive layouts.</p>

<h3 id="key-flexbox-concepts">Key Flexbox Concepts:</h3>

<ol>
  <li>
    <p><strong>Flex Container</strong>: The parent element that holds the flex items. Set it up using <code class="language-plaintext highlighter-rouge">display: flex;</code>.</p>

    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="css" /><category term="html" /><summary type="html"><![CDATA[Mastering Flexbox in CSS]]></summary></entry><entry><title type="html">The Power of Git Rebase</title><link href="http://localhost:4000/git/2024/09/02/power-of-git-rebase.html" rel="alternate" type="text/html" title="The Power of Git Rebase" /><published>2024-09-02T00:03:33+03:00</published><updated>2024-09-02T00:03:33+03:00</updated><id>http://localhost:4000/git/2024/09/02/power-of-git-rebase</id><content type="html" xml:base="http://localhost:4000/git/2024/09/02/power-of-git-rebase.html"><![CDATA[<h2 id="the-power-of-git-rebase">The Power of Git Rebase</h2>

<p>Git rebase is a powerful tool for managing commits in a branch. It helps you:</p>

<ol>
  <li><strong>Clean Up History</strong>: Rebase can squash multiple commits into a single commit, making your history cleaner.</li>
  <li><strong>Keep a Linear History</strong>: By rebasing instead of merging, you maintain a linear project history, which is easier to follow.</li>
  <li><strong>Resolve Conflicts Early</strong>: Rebasing brings changes from the base branch into your feature branch, allowing you to resolve conflicts before merging.</li>
</ol>

<p>To use rebase:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout feature-branch
git rebase main
</code></pre></div></div>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[The Power of Git Rebase]]></summary></entry><entry><title type="html">Using Virtual Environments in Python</title><link href="http://localhost:4000/python/2024/09/02/python-virtual-environments.html" rel="alternate" type="text/html" title="Using Virtual Environments in Python" /><published>2024-09-02T00:03:33+03:00</published><updated>2024-09-02T00:03:33+03:00</updated><id>http://localhost:4000/python/2024/09/02/python-virtual-environments</id><content type="html" xml:base="http://localhost:4000/python/2024/09/02/python-virtual-environments.html"><![CDATA[<h2 id="using-virtual-environments-in-python">Using Virtual Environments in Python</h2>

<p>Virtual environments are crucial for managing dependencies in Python projects. They isolate your project’s dependencies, ensuring compatibility and preventing conflicts.</p>

<h3 id="steps-to-create-a-virtual-environment">Steps to Create a Virtual Environment:</h3>

<ol>
  <li><strong>Create a Virtual Environment</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv venv
</code></pre></div>    </div>
    <p>```bash</p>
  </li>
  <li><strong>Activate the Virtual Environment</strong>:
    <ul>
      <li>On Windows:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>venv<span class="se">\S</span>cripts<span class="se">\a</span>ctivate
</code></pre></div>        </div>
      </li>
      <li>On macOS and Linux:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source </span>venv/bin/activate
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>Install Project Dependencies</strong>:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[Using Virtual Environments in Python]]></summary></entry><entry><title type="html">Optimizing Your Webpack Build for Production</title><link href="http://localhost:4000/webpack/2024/09/01/optimize-webpack-builds.html" rel="alternate" type="text/html" title="Optimizing Your Webpack Build for Production" /><published>2024-09-01T23:47:42+03:00</published><updated>2024-09-01T23:47:42+03:00</updated><id>http://localhost:4000/webpack/2024/09/01/optimize-webpack-builds</id><content type="html" xml:base="http://localhost:4000/webpack/2024/09/01/optimize-webpack-builds.html"><![CDATA[<h2 id="optimizing-your-webpack-build-for-production">Optimizing Your Webpack Build for Production</h2>

<p>When preparing your application for production, optimizing your Webpack build can significantly improve performance. Here are a few tips:</p>

<ol>
  <li><strong>Minify Your Code</strong>: Use <code class="language-plaintext highlighter-rouge">terser-webpack-plugin</code> to minify JavaScript files, reducing their size.</li>
  <li><strong>Enable Code Splitting</strong>: Split your code into smaller chunks to load only what’s necessary.</li>
  <li><strong>Tree Shaking</strong>: Remove unused code by enabling tree shaking in your Webpack config.</li>
  <li><strong>Optimize Images</strong>: Use <code class="language-plaintext highlighter-rouge">image-webpack-loader</code> to compress and optimize images.</li>
</ol>

<p>These steps will help reduce your bundle size and improve load times.</p>]]></content><author><name></name></author><category term="webpack" /><summary type="html"><![CDATA[Optimizing Your Webpack Build for Production]]></summary></entry></feed>